from fastapi import FastAPI, File, UploadFile, HTTPException
from fastapi.responses import JSONResponse
from PyPDF2 import PdfReader
import shutil
import os
import re
from text_feature import TextFeature

app = FastAPI()
# Directory where uploaded files will be saved
UPLOAD_DIRECTORY = "./uploaded_files"

# Ensure upload directory exists
if not os.path.exists(UPLOAD_DIRECTORY):
    os.makedirs(UPLOAD_DIRECTORY)

@app.post("/upload/")
async def upload_pdf(file: UploadFile = File(...)):
    try:
        # Ensure the uploaded file is a PDF
        if file.content_type != "application/pdf":
            raise HTTPException(status_code=400, detail="Only PDF files are allowed.")

        # Save the uploaded file to the upload directory
        file_location = f"{UPLOAD_DIRECTORY}/{file.filename}"
        with open(file_location, "wb") as buffer:
            shutil.copyfileobj(file.file, buffer)

        # Read the PDF content
        pdf_text = read_pdf(file_location)
        result = await generating_results(pdf_text)
        return result
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to read PDF: {str(e)}")
    
def read_pdf(pdf_path: str) -> str:
    """
    Read the text from a PDF file and return it as a string.
    """
    try:
        reader = PdfReader(pdf_path)
        text = ""
        for page in reader.pages:
            text += page.extract_text()
            clean_text = re.sub(r'\s+', ' ', text).strip()
        return clean_text
    except Exception as e:
        raise Exception(f"Error reading PDF: {str(e)}")
    
async def generating_results(text):
    """
    Generate various text features including spelling correction, summaries, 
    sentiment analysis, sentence count, and language detection.

    This function performs the following operations on the input text:
    1. Corrects spelling errors using a specified correction method.
    2. Generates a summary of the text using two different summarization techniques (Sumy and SpaCy).
    3. Analyzes the sentiment of the text to provide a sentiment label and score.
    4. Counts the number of sentences in the text.
    5. Detects the language of the input text.

    Args:
        text (str): The input text to be processed.

    Returns:
        dict: A dictionary containing the following key-value pairs:
            - "summary_by_sumy": The summary of the text generated by the Sumy summarization method.
            - "summary_by_spacy": The summary of the text generated by the SpaCy summarization method.
            - "sentiment_label": The label indicating the sentiment (e.g., 'POSITIVE', 'NEGATIVE').
            - "sentiment_score": The confidence score associated with the sentiment label.
            - "sentences": The number of sentences in the input text.
            - "lang": The detected language of the input text.

    Raises:
        Exception: Raises an Exception if any error occurs during the processing of the text,
        including errors from the text feature methods.

    Example:
        result = await generating_results("I absolutely love the new design of your website!")
        print(result)  # Output will include summary, sentiment, number of sentences, and detected language.
    """
    try:
        # Summary
        summary = await TextFeature.summarize_text_by_spacy(text=text, num_sentences=4)

        # Sentiment Analysis
        sentiment_label, sentiment_score = await TextFeature.sentiment_analysis_by_flair(text)

        # Number of Sentences
        sentences = await TextFeature.sentence_separate(text)

        # Language Detection
        lang = await TextFeature.detect_language_by_lang(text)

        return {
            "summary": summary,
            "sentiment_label": sentiment_label,
            "sentiment_score": sentiment_score,
            "sentences": len(sentences),
            "lang": lang
        }
    except Exception as e:
        raise Exception(f"Error generating_results: {str(e)}")
   